function [testvectors, testdefs] = gen_tables(switches)
    % generates input tables for testbench.m

    if nargin == 1
        % pull out switches
        TESTVECS_TRIOS = switches.TESTVECS_TRIOS
        TESTVECS_TAKEFIVE = switches.TESTVECS_TAKEFIVE
        % blind source sep
        TESTDEFS_BSS = switches.TESTDEFS_BSS 
        % hand aligned - ie using midi masking with prealigned MIDI
        TESTDEFS_HASS = switches.TESTDEFS_HASS 
        % Hand aligned masking. just mask with no NMF 
        TESTDEFS_HAM = switches.TESTDEFS_HAM
        % score aligned source separaion - full pipeline
        TESTDEFS_SASS = switches.TESTDEFS_SASS
    else
        % when in doubt do everything
        TESTVECS_TRIOS = true;
        TESTVECS_TAKEFIVE = true;
        TESTDEFS_BSS = true;
        TESTDEFS_HASS = true;
        TESTDEFS_HAM = true;
        TESTDEFS_SASS = true;
    end

    % make empty testvectors/testdefs
    % a testdef is the algorithm/parameters used to solve the problem in a particular way
    % a testvec is a particular case of the problem
    testvectors = cell(0);
    testdefs = cell(0);

    % pick up some useful path strings
    PROJECT_PATH = fullfile('../../');
    TRIOS_DATA_PATH = fullfile(PROJECT_PATH, '/datasets/TRIOS');
    PHENICX_DATA_PATH = fullfile(PROJECT_PATH, '/datasets/PHENICX');
    DEV_DATA_PATH = fullfile(PROJECT_PATH, '/datasets/development');

    % BUILD TEST VECTORS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    
    if TESTVECS_TRIOS

        % mix - TRIOS brahms
        sources = [
            string(fullfile(TRIOS_DATA_PATH, "brahms/piano.wav")), ...
            string(fullfile(TRIOS_DATA_PATH, "brahms/horn.wav")), ...
            string(fullfile(TRIOS_DATA_PATH, "brahms/violin.wav")) ...            
        ]
        midi_stack( ...
            "./tmp/triosBrahmsMix.mid", ...
            fullfile(TRIOS_DATA_PATH, "brahms/piano.mid"), ...
            fullfile(TRIOS_DATA_PATH, "brahms/horn.mid"), ...
            fullfile(TRIOS_DATA_PATH, "brahms/violin.mid") ...
        );
        testvectors{end+1} = struct( ...
            "name"       , "triosBrahmsMix", ...
            "audioPath"  , fullfile(TRIOS_DATA_PATH, "brahms/mix.wav"), ...
            "midiPath"   , "./tmp/triosBrahmsMix.mid", ...
            "sourcePaths", sources ...
        );

        % mix - TRIOS mozart
        sources = [
            string(fullfile(TRIOS_DATA_PATH, "mozart/piano.wav")), ...
            string(fullfile(TRIOS_DATA_PATH, "mozart/clarinet.wav")), ...
            string(fullfile(TRIOS_DATA_PATH, "mozart/viola.wav")) ...
        ]
        midi_stack( ...
            "./tmp/triosMozartMix.mid", ...
            fullfile(TRIOS_DATA_PATH, "mozart/piano.mid"), ...
            fullfile(TRIOS_DATA_PATH, "mozart/clarinet.mid"), ...
            fullfile(TRIOS_DATA_PATH, "mozart/viola.mid") ...
        );
        testvectors{end+1} = struct( ...
            "name"       , "triosMozartMix", ...
            "audioPath" , fullfile(TRIOS_DATA_PATH, "mozart/mix.wav"), ...
            "midiPath"  , "./tmp/triosMozartMix.mid", ... 
            "sourcePaths", sources ...
        );

        % mix - TRIOS lussier
        sources = [
            string(fullfile(TRIOS_DATA_PATH, "lussier/bassoon.wav")), ...
            string(fullfile(TRIOS_DATA_PATH, "lussier/piano.wav")), ...
            string(fullfile(TRIOS_DATA_PATH, "lussier/trumpet.wav")) ...
        ]        
        midi_stack( ...
            "./tmp/triosLussierMix.mid", ...
            fullfile(TRIOS_DATA_PATH, "lussier/bassoon.mid"), ...
            fullfile(TRIOS_DATA_PATH, "lussier/piano.mid"), ...
            fullfile(TRIOS_DATA_PATH, "lussier/trumpet.mid") ...
        );
        testvectors{end+1} = struct( ...
            "name"       , "triosLussierMix", ...
            "audioPath" , fullfile(TRIOS_DATA_PATH, "lussier/mix.wav"), ...
            "midiPath"  , "./tmp/triosLussierMix.mid", ... 
            "sourcePaths", sources ...
        );

        % mix - TRIOS schubert
        sources = [
            string(fullfile(TRIOS_DATA_PATH, "schubert/cello.wav")), ...
            string(fullfile(TRIOS_DATA_PATH, "schubert/piano.wav")), ...
            string(fullfile(TRIOS_DATA_PATH, "schubert/violin.wav")) ...
        ]
        midi_stack( ...
            "./tmp/triosSchubertMix.mid", ...
            fullfile(TRIOS_DATA_PATH, "schubert/cello.mid"), ...
            fullfile(TRIOS_DATA_PATH, "schubert/piano.mid"), ...
            fullfile(TRIOS_DATA_PATH, "schubert/violin.mid") ...
        );
        testvectors{end+1} = struct( ...
            "name"       , "triosSchubertMix", ...
            "audioPath" , fullfile(TRIOS_DATA_PATH, "schubert/mix.wav"), ...
            "midiPath"  , "./tmp/triosSchubertMix.mid", ... 
            "sourcePaths", sources ...
        );
    end    

    if TESTVECS_TAKEFIVE
        % mix - TRIOS take five
        sources = [
            string(fullfile(TRIOS_DATA_PATH, "take_five/kick.wav")), ...
            string(fullfile(TRIOS_DATA_PATH, "take_five/piano.wav")), ...
            string(fullfile(TRIOS_DATA_PATH, "take_five/ride.wav")), ...
            string(fullfile(TRIOS_DATA_PATH, "take_five/saxophone.wav")), ...
            string(fullfile(TRIOS_DATA_PATH, "take_five/snare.wav")) ... 
        ]
        midi_stack( ...
            "./tmp/triosTakeFiveMix.mid", ...
            fullfile(TRIOS_DATA_PATH, "take_five/kick.mid"), ...
            fullfile(TRIOS_DATA_PATH, "take_five/piano.mid"), ...
            fullfile(TRIOS_DATA_PATH, "take_five/ride.mid"), ...
            fullfile(TRIOS_DATA_PATH, "take_five/saxophone.mid"), ...
            fullfile(TRIOS_DATA_PATH, "take_five/snare.mid") ... 
        );
        testvectors{end+1} = struct( ...
            "name"       , "triosTakeFiveMix", ...
            "audioPath" , fullfile(TRIOS_DATA_PATH, "take_five/mix.wav"), ...
            "midiPath"  , "./tmp/triosTakeFiveMix.mid", ... 
            "sourcePaths", sources ...
        );
    end

    % BUILD TEST DEFINITIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % build a spectInfo
    si_std = struct( ... 
        "wlen"         , 4096, ... 
        "nfft"         , 4096 * 4, ...
        "hop"          , 4096 / 8, ...
        "analwin"      , blackmanharris(4096, 'periodic'), ...
        "synthwin"     , hamming(4096, 'periodic'), ...
        "fs"           , fs, ... 
        "max_freq_bins", 1000 ...
    );
    

    %{
    if TESTDEFS_BSS
        % BSS args to provide:
        % spectInfo, spect_func, nmf_func, reconstruct_func

        % standard euclid
        si = si_std;
        spect_func = @nss_stft;
        nmf_func = @nss_nmf_euclidian;
        reconstruct_func = @nss_reconstruct_keepPhase;
        testdefs{end+1} = struct ( ...
            "name", "bssEuclidWlen4096Hop512",
            "type", "BSS",
            "args", {si,spect_func,nmf_func,reconstruct_func};
        ); 

        % standard IS
        si = si_std;
        spect_func = @nss_stft;
        nmf_func = @nss_nmf_is;
        reconstruct_func = @nss_reconstruct_keepPhase;
        testdefs{end+1} = struct ( ...
            "name", "bssEuclidWlen4096Hop512",
            "type", "BSS",
            "args", {si,spect_func,nmf_func,reconstruct_func};
        ); 

        % standard KL
        si = si_std;
        spect_func = @nss_stft;
        nmf_func = @nss_nmf_kl;
        reconstruct_func = @nss_reconstruct_keepPhase;
        testdefs{end+1} = struct ( ...
            "name", "bssEuclidWlen4096Hop512",
            "type", "BSS",
            "args", {si,spect_func,nmf_func,reconstruct_func};
        ); 
    end
    %}
end
