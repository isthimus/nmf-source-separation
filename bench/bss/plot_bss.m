% plotter to give bss a whirl - its been a semester or so
clear

% setup
% cd to the folder this script is in
script_path = mfilename('fullpath');
if ispc
    script_path = script_path(1: find(script_path == '\', 1, 'last'));
elseif isunix
    script_path = script_path(1: find(script_path == '/', 1, 'last'));
end
cd(script_path)

% setup matlab path and pick up some useful path strings
PROJECT_PATH = fullfile('../../');
TRIOS_DATA_PATH = fullfile(PROJECT_PATH, '/datasets/TRIOS');
PHENICX_DATA_PATH = fullfile(PROJECT_PATH, '/datasets/PHENICX');
DEV_DATA_PATH = fullfile(PROJECT_PATH, '/datasets/development');
run(fullfile(PROJECT_PATH, 'source/scripts/setpaths.m'));

% get audio
% [audio, fs] = audioread(fullfile(TRIOS_DATA_PATH, "mozart/clarinet.wav"));
[audio, fs] = audioread("C:/Users/matth/third-year-project/score-aware-source-separation/datasets/bench/TRIOS_lussier_bsnTpt_M.wav");

%{
% build a spectInfo
spectInfo = struct( ... 
    "wlen"         , 1024, ... 
    "nfft"         , 1024 * 4, ...
    "hop"          , 1024 / 4, ...
    "analwin"      , blackmanharris(1024, 'periodic'), ...
    "synthwin"     , hamming(1024, 'periodic'), ...
    "fs"           , fs, ... 
    "max_freq_bins", 100 ...
);
%}

% build a spectInfo
spectInfo = struct( ... 
    "wlen"         , 2048, ... 
    "nfft"         , 2048 * 4, ...
    "hop"          , 2048 / 4, ...
    "analwin"      , blackmanharris(2048, 'periodic'), ...
    "synthwin"     , hamming(2048, 'periodic'), ...
    "fs"           , fs, ... 
    "max_freq_bins", 400 ...
);

% some cheeky MIDI for num notes
%notes = midiInfo(readmidi(fullfile(TRIOS_DATA_PATH,"mozart/clarinet.mid")), 0);
%k = length(unique(notes(:,3))); % this counts the number of distinct midi notes

k= 13;
spect_func = @nss_stft;
nmf_init_func = @nss_init_rand;
nmf_func = @nss_nmf_euclidian;
reconstruct_func = @nss_reconstruct_keepPhase;

% do it
sources_out = sepSources_blind_plot (...
    audio, ...
    spectInfo, ...
    k, ...
    spect_func, ...
    nmf_init_func, ...
    nmf_func, ...
    reconstruct_func ...
);